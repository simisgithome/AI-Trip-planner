#!/usr/bin/env python3
"""
Test script to verify the AI Trip Planner is working end-to-end
"""

import json
import requests
import sys
import time
from datetime import datetime

def test_backend_health():
    """Test if backend server is responding"""
    try:
        response = requests.get('http://localhost:3001/health', timeout=5)
        if response.status_code == 200:
            print("✅ Backend server is running and healthy")
            return True
        else:
            print(f"❌ Backend server returned status: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"❌ Backend server is not responding: {e}")
        return False

def test_ai_engine():
    """Test the AI engine directly"""
    try:
        import subprocess
        test_data = {
            "destination": "New York City",
            "startDate": "2025-05-01",
            "endDate": "2025-05-05",
            "budget": 2000,
            "travelers": 2,
            "interests": ["culture", "food", "shopping"],
            "preferences": "Urban exploration"
        }
        
        cmd = [
            'python', 
            '../ai-engine/itinerary-generator.py', 
            json.dumps(test_data)
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, cwd='.')
        
        if result.returncode == 0:
            try:
                itinerary = json.loads(result.stdout)
                print("✅ AI engine is working and generating itineraries")
                print(f"   Generated itinerary for {itinerary['destination']}")
                print(f"   Duration: {itinerary['duration']} days")
                print(f"   Estimated budget: ${itinerary['estimatedBudget']}")
                return True
            except json.JSONDecodeError:
                print("❌ AI engine returned invalid JSON")
                return False
        else:
            print(f"❌ AI engine failed: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"❌ AI engine test failed: {e}")
        return False

def test_api_endpoint():
    """Test the API endpoint for generating itineraries"""
    try:
        test_data = {
            "destination": "Barcelona, Spain",
            "startDate": "2025-06-15",
            "endDate": "2025-06-20",
            "budget": 1800,
            "travelers": 2,
            "interests": ["culture", "food", "art"],
            "preferences": "Mediterranean getaway"
        }
        
        response = requests.post(
            'http://localhost:3001/api/itinerary',
            json=test_data,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        
        if response.status_code == 200:
            itinerary = response.json()
            print("✅ API endpoint is working")
            print(f"   Created itinerary ID: {itinerary.get('id', 'N/A')}")
            print(f"   Destination: {itinerary.get('destination', 'N/A')}")
            print(f"   Generated by: {itinerary.get('generatedBy', 'N/A')}")
            return True
        else:
            print(f"❌ API endpoint failed with status: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"❌ API endpoint test failed: {e}")
        return False

def test_frontend_access():
    """Test if frontend is accessible"""
    try:
        response = requests.get('http://localhost:3000', timeout=5)
        if response.status_code == 200:
            print("✅ Frontend is accessible")
            return True
        else:
            print(f"❌ Frontend returned status: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"❌ Frontend is not accessible: {e}")
        return False

def main():
    """Run all tests"""
    print("🧪 Testing AI Trip Planner Agent")
    print("=" * 50)
    
    tests = [
        ("Backend Health Check", test_backend_health),
        ("AI Engine Test", test_ai_engine),
        ("Frontend Access Test", test_frontend_access),
        ("API Endpoint Test", test_api_endpoint),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n🔍 Running {test_name}...")
        if test_func():
            passed += 1
        time.sleep(1)  # Brief pause between tests
    
    print("\n" + "=" * 50)
    print(f"📊 Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("🎉 All tests passed! The AI Trip Planner agent is working correctly.")
        print("\n📝 Next steps:")
        print("   1. Set up Google Cloud authentication for real AI-powered itineraries")
        print("   2. Open http://localhost:3000 to use the web interface")
        print("   3. Try creating a trip itinerary through the form")
    else:
        print("⚠️  Some tests failed. Please check the issues above.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)